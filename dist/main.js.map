{"version":3,"file":"main.js","mappings":"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","sources":["webpack://fly-type/./src/scripts/movingObject.js","webpack://fly-type/./src/scripts/movingRectangle.js","webpack://fly-type/./src/scripts/movingCharacter.js","webpack://fly-type/./src/scripts/util.js","webpack://fly-type/./src/scripts/spiral.js","webpack://fly-type/./src/scripts/game.js","webpack://fly-type/./src/scripts/view.js","webpack://fly-type/./src/index.js"],"sourcesContent":["export default class MovingObject {\n\n    constructor(argsHash) {\n        this.xCoordinate = argsHash.xCoordinate; \n        this.yCoordinate = argsHash.yCoordinate;\n        this.xVelocity = argsHash.xVelocity; \n        this.yVelocity = argsHash.yVelocity; \n        this.color = argsHash.color;\n        this.transparency = argsHash.transparency || 1;\n    }\n\n    move() {\n        // console.log(`before - x: ${this.xCoordinate} and y:${this.yCoordinate}`);\n        this.xCoordinate = this.xCoordinate + this.xVelocity;\n        this.yCoordinate = this.yCoordinate + this.yVelocity;\n        // console.log(`after - x: ${this.xCoordinate} and y:${this.yCoordinate}`);\n    }\n}","import MovingObject from \"./movingObject\";\n\nexport default class MovingRectangle extends MovingObject {\n    \n    constructor(argsHash) {\n        super(argsHash);\n        this.width = argsHash.width;\n        this.height = argsHash.height;\n        // debugger;\n    }\n\n    draw(canvasInterface) {\n        // canvasInterface.fillStyle = this.color;\n\n        const gradient = canvasInterface.createLinearGradient(this.xCoordinate, this.yCoordinate, this.xCoordinate, this.yCoordinate + this.height);\n        \n        gradient.addColorStop(0, \"#abdbe3\");\n        gradient.addColorStop(0.30, \"#76b5c5\");\n        gradient.addColorStop(0.5, \"#76b5c5\");\n        gradient.addColorStop(0.70, \"#76b5c5\");\n        gradient.addColorStop(1, \"#abdbe3\");\n        \n        // Set the fill style to the gradient\n        canvasInterface.fillStyle = gradient;\n        canvasInterface.fillRect(this.xCoordinate, this.yCoordinate, this.width, this.height);\n    }\n}\n\n// // Get a reference to the canvas element\n// const canvas = document.getElementById('my-canvas');\n\n// // Get the canvas context\n// const ctx = canvas.getContext('2d');\n\n// // Set the fill color and draw a filled rectangle\n// ctx.fillStyle = 'red';\n// ctx.fillRect(50, 50, 100, 100);\n\n// // Set the stroke color and draw a stroked rectangle\n// ctx.strokeStyle = 'blue';\n// ctx.strokeRect(200, 50, 100, 100);","import MovingRectangle from \"./movingRectangle\";\n\nexport default class MovingCharacter extends MovingRectangle {\n\n    // static FONT = '20px Georgia';\n    static FONT = '20px Alkatra';\n\n    constructor(argsHash) {\n        super(argsHash);\n        this.character = argsHash.character;\n        this.color = (argsHash.color || \"black\");\n        this.canvasInterface = argsHash.canvasInterface;\n        this.typeable = argsHash.typeable;\n        this.points = 0;\n    }\n\n    draw(canvasInterface) {\n        // debugger;\n        canvasInterface.fillStyle = this.color;\n        canvasInterface.font = MovingCharacter.FONT;\n        canvasInterface.fillText(this.character, this.xCoordinate, this.yCoordinate);\n    }\n\n    get height(){\n        this.canvasInterface.font = MovingCharacter.FONT;\n        const fontMath = this.canvasInterface.measureText(this.character);\n        const h = fontMath.actualBoundingBoxAscent + fontMath.actualBoundingBoxDescent\n        \n        return h;\n    }\n\n    set height(value){\n        //setting height does nothing. Can only be set by changing the character\n    }\n}","import Game from \"./game\";\n\nlet color = true;\n\nexport function selectRand(array) {\n    if(!array.length) return null;\n\n    const randIndex = Math.floor(Math.random() * array.length);\n\n    return array[randIndex];\n}\n\nexport function genSentence() {\n    // debugger;\n\n    const adjective = selectRand(Game.ADJECTIVES);\n    const noun = selectRand(Game.NOUNS);\n    const verb = selectRand(Game.VERBS);\n    const adverb = selectRand(Game.ADVERBS);\n\n    const sentence = `${adjective} ${noun}s ${verb} ${adverb}`;\n    return sentence;\n}\n\nexport function setBanner(msg) {\n    const senDiv = document.getElementById(\"sentence\")\n    senDiv.innerHTML = msg;\n}\n\nconst msgDiv = document.getElementById(\"message\")\n\nexport function setMsg(msg, color = \"\", background = \"\") {\n    msgDiv.style.backgroundColor = background;\n    msgDiv.style.color = color;\n    msgDiv.innerHTML = msg;\n}\n\nexport function getMsg() {\n    return msgDiv.innerHTML;\n}\n\nexport function calculateCirclePoints(centerX, centerY, radius, numPoints) {\n    const points = [];\n    for (let i = 0; i < numPoints; i++) {\n      const angle = i * 2 * Math.PI / numPoints;\n      const x = centerX + radius * Math.cos(angle);\n      const y = centerY + radius * Math.sin(angle);\n      points.push({x: x, y: y});\n    }\n    return points;\n  }","import MovingCharacter from \"./movingCharacter\";\nimport MovingObject from \"./movingObject\";\nimport { calculateCirclePoints } from \"./util\";\n\nexport default class Spiral extends MovingObject {\n\n    constructor(argsHash) {\n        super(argsHash);\n        this.canvasInterface = argsHash.canvasInterface;\n        this.radius = 30;\n        this.charCount = 10;\n        this.points = calculateCirclePoints(this.xCoordinate, this.yCoordinate, this.radius, this.charCount);\n        this.characters = [];\n        this.createChars();\n        this.counter = 0;\n        this.xDrop = this.points[0][\"x\"];\n        this.yDrop = this.points[0][\"y\"];\n    }\n\n    createChars() {\n        let alph = \"abcdefghijk\"\n\n        for (let i = 0; i < this.charCount; i++) {\n            const newChar = new MovingCharacter({\n                xCoordinate: this.points[i][\"x\"],\n                yCoordinate: this.points[i][\"y\"],\n                xVelocity: 0, \n                yVelocity: 0, \n                character: alph[i],\n                canvasInterface: this.canvasInterface,\n                typeable: false\n            })\n\n            this.characters.push(newChar);\n        }\n    }\n\n    move() {\n        ++this.counter;\n        \n        if(this.counter % 3 === 0) {\n            let firstX = this.characters[0].xCoordinate;\n            let firstY = this.characters[0].yCoordinate;\n\n            for (let index = 0; index < this.characters.length - 1; index++) {\n                const element = this.characters[index];\n                element.xCoordinate = this.characters[index+1].xCoordinate;\n                element.yCoordinate = this.characters[index+1].yCoordinate;\n            }\n\n            let lastChar = this.characters[this.characters.length-1];\n            lastChar.xCoordinate = firstX;\n            lastChar.yCoordinate = firstY;\n        }\n    }\n\n    draw (){\n        this.characters.forEach((char) => {\n            // debugger;\n            char.draw(this.canvasInterface);\n        })\n    }\n\n\n}","import MovingCharacter from \"./movingCharacter\";\nimport MovingRectangle from \"./movingRectangle\";\nimport Spiral from \"./spiral\";\nimport { genSentence, getMsg, selectRand, setBanner, setMsg } from \"./util\";\n\nexport default class Game {\n   \n    // static DICTIONARY = [\"h\",\"j\",\"k\",\"l\"];\n    // static DICTIONARY = [\"h\"]; // limited test chars\n    \n    static ADJECTIVES = ['furry', 'happy', 'gloomy', 'friendly'];\n    static NOUNS = ['dog', 'cat', 'tree', 'mountain'];\n    static VERBS = ['ran', 'jumped', 'slept', 'ate'];\n    static ADVERBS = ['quickly', 'slowly', 'loudly', 'quietly'];\n\n    constructor(canvasInterface) {\n        this.canvasInterface = canvasInterface;\n        this.width = canvasInterface.canvas.width;\n        this.height = canvasInterface.canvas.height;\n        this.gameOver = false;\n        this.paused = true;\n\n        this.scoreOutput = document.getElementById(\"game-score\");\n        this.livesOutput = document.getElementById(\"game-lives\");\n\n        this.reset();\n\n        this.xCharOptions = [\n            this.width*0.20,\n            this.width*0.40,\n            this.width*0.60,\n            this.width*0.80\n        ];\n        \n        // this.img.style.width = '100%';\n        // this.img.style.height = '100%';\n\n\n        // debugger;\n\n        //initialize the target bar that the letters will cross and give it starting positions\n        this.targetBar = new MovingRectangle({\n            xCoordinate: 0,\n            yCoordinate: this.height*0.75,\n            xVelocity: 0, \n            yVelocity: 0, \n            color: \"lightgrey\",\n            width: this.width,\n            height: 50,\n            canvasInterface: this.canvasInterface,\n        })\n        // debugger;\n        // this.drawBackdrop();\n\n        this.img = new Image();\n        this.img.src = 'assets/fullLegalPad500.png';\n\n        this.img.onload = () => {\n            this.drawBackdrop();\n            this.targetBar.draw(this.canvasInterface);\n        }\n\n        // let spiralY = this.height*0.2;\n        this.wordSpirals = [];\n\n        this.xCharOptions.forEach((x) => {\n                const newSpiral = new Spiral({\n                xCoordinate: x,\n                yCoordinate: this.height*0.2,\n                xVelocity: 0, \n                yVelocity: 0, \n                // color: \"lightgrey\",\n                // width: this.width,\n                // height: 50,\n                canvasInterface: this.canvasInterface\n            })\n            this.wordSpirals.push(newSpiral);\n        });\n    }\n\n    printScore() {\n        this.scoreOutput.innerHTML = this.score;\n    }\n\n    printLives() {\n        this.livesOutput.innerHTML = this.lives;\n    }\n\n    addChar() {\n        // debugger;\n        const charToAdd = this.targetArray[0];\n        this.wordPause--;\n        // debugger;\n        if (this.wordPause > 0) {\n            --this.wordPause;\n        } else if (this.characters.length >= 1 && this.characters[this.characters.length-1].yCoordinate <= this.height*0.05) {\n            //do nothing if the most recently added character is still within the first 5% of the height of the board\n        }\n        else if(charToAdd === \" \") {\n            this.targetArray.shift();\n            this.wordPause = 3;\n            this.charVel = this.charVel*1.2;\n        }\n        else if (this.targetArray.length > 0 && this.wordPause <= 0){\n            // debugger;\n            const newChar = new MovingCharacter({\n                xCoordinate: selectRand(this.wordSpirals).xDrop,\n                yCoordinate: this.wordSpirals[0].yDrop,\n                xVelocity: 0, \n                yVelocity: this.charVel, \n                character: this.targetArray.shift(),\n                canvasInterface: this.canvasInterface,\n                typeable: false\n            })\n            this.characters.push(newChar);\n        } else if (this.characters.length === 0) {\n            // debugger;\n            this.resetSentence();\n        }\n        // debugger;\n    }\n\n    // removeChar() {\n    //     return this.noSpaceTarget.shift();\n    // }\n\n    // sentenceCleared() {\n    //     return (this.noSpaceTarget.length === 0 || this.characters.length === 0)\n    // }\n\n    resetSentence() {\n        this.targetSentence = genSentence();\n        this.targetArray = Array.from(this.targetSentence);\n        // this.noSpaceTarget = Array.from(this.targetSentence.split(\" \").join(\"\"));\n        setBanner(this.targetSentence);\n    }\n\n    step() {\n        \n        for (let i = this.characters.length - 1; i >=0; i--) {\n            const char = this.characters[i];\n            char.move();\n\n            if (this.charOffCanvas(char)) {\n                // debugger;\n                // console.log(\"char deleted\");\n                this.characters.splice(i,1);\n            } else {\n                this.colorChar(char);\n            }\n        }\n\n        this.wordSpirals.forEach((spiral) => {\n            spiral.move();\n        })\n        \n        //end game if score is <=0\n        if (!this.hasLives()) {\n            this.pause();\n            this.slowChars();\n            // this.drawCounters();\n            // this.characters = [];\n            // this.reset();\n            this.gameOver = true;\n            // debugger;\n            // console.log(\"game over\");\n            // debugger;\n        }\n        // console.log(this.characters.length, \"num of chars\");\n    }\n\n    slowChars() {\n        console.log(\"chars slowed\");\n        this.characters.forEach((char) => {\n            char.yVelocity = 0.8;\n        })\n        this.wordPause = 15;\n        this.charVel = 2;\n    }\n\n    hasLives() {\n        return this.lives > 0;\n    }\n\n    charOffCanvas(char) {\n        if (char.yCoordinate > (this.height + char.height)) {\n            this.lives --;\n\n            let adder = \"\"\n\n            if (!this.hasLives()) {\n                adder = '. Enter to replay'\n            }\n\n            setMsg(`Oh no, you missed ${char.character}${adder}`, \"black\", \"grey\");\n            // this.pause();\n            this.slowChars();\n            this.animate(false);\n            return true\n        } else {\n            return false;\n        }\n    }\n\n    animate(withChars = true){\n        this.drawBackdrop();\n        this.targetBar.draw(this.canvasInterface);\n\n        this.characters.forEach((char) =>{\n            char.draw(this.canvasInterface);\n        });\n        \n        this.wordSpirals.forEach((spiral) => {\n            spiral.draw();\n        });\n        \n        this.drawCounters();\n    }\n\n    drawCounters() {\n        this.printLives();\n        this.printScore();\n    }\n\n    start() { \n        // debugger;\n        setMsg(\"\");\n        this.paused = false;\n        this.gameInterval = setInterval(() => {\n            // this.paused = false;\n            if (this.gameOver) {\n                this.reset();\n                this.gameOver = false;\n            }\n\n            this.step();\n            \n            if (!this.gameOver) this.animate();\n        \n        }, 17);\n        \n        this.charInterval = setInterval(() => {\n            // console.log(\"char added\");\n            this.addChar();\n        }, 500);\n    }\n\n    pause() {\n        clearInterval(this.gameInterval);\n        clearInterval(this.charInterval);\n        this.paused = true;\n        this.drawCounters();\n        // debugger;\n        // setMsg(\"Game paused. Space to resume.\")\n        this.addOverlay()\n    }\n\n    addOverlay(color = \"grey\", transparency = 0.5) {\n        this.canvasInterface.globalAlpha = transparency;\n        this.canvasInterface.fillStyle = color;\n        this.canvasInterface.fillRect(0,0,this.width,this.height);\n        this.canvasInterface.globalAlpha = 1;\n    }\n\n    colorChar(char) {\n        //checks if it is within the topmost and bottommost bounds of the target bar\n        \n        //the top of the bar\n        const entry = this.targetBar.yCoordinate;\n        const exit = this.targetBar.yCoordinate + this.targetBar.height + char.height;\n\n        if (char.yCoordinate >= entry && char.yCoordinate <= exit) {\n\n            let diff = exit - entry;\n            let segment = (char.yCoordinate - entry) / diff\n\n            if (segment >= 0.2 && segment <= 0.8) {\n                char.color = \"yellow\";\n                char.points = 15;\n            } else {\n                char.color = \"red\";\n                char.points = 10;\n            }\n\n            char.typeable = true;      \n        } else {\n            char.typeable = false;\n            char.points = 0;\n            char.color = \"black\";\n        }\n    }\n\n    \n    checkEntry(inputChar) {\n\n        let validChar = null;\n\n        //1. for each character that matches the user's input and is in the hit zone, give the user points, increase their lives, and add the character to a separate array to be deleted\n        const matchingChars = this.characters.filter((char) => {\n            if(char.character === inputChar && char.typeable) {\n                // debugger;\n                if (char.points === 15) {\n                    setMsg(\"Right on target - Nice!\", \"red\", \"gold\");\n                } else {\n                    setMsg(\"Close....\", \"black\", \"grey\");\n                }\n\n                this.score = Math.floor(this.score + char.points*char.yVelocity);\n                // this.lives = Math.min(this.lives + 1, 3);\n                return true;\n            } else if (char.typeable) {\n                validChar = char.character;\n            }\n        })\n\n        // cycle through these matching characters and delete them from the game as they have been hit\n        if (matchingChars.length > 0) {\n            matchingChars.forEach((hitChar) => {\n                const delIdx = this.characters.indexOf(hitChar);\n                this.characters.splice(delIdx,1);\n            });\n        } else {\n            this.lives = this.lives - 1;\n\n            let adder = \". Enter to continue.\";\n            \n            if(validChar) {\n                adder = ` instead of ${validChar}`;\n            }\n            \n            if (!this.hasLives()) {\n                adder = adder + \". Space to replay!\"\n            }\n\n            setMsg(`Argh. You entered ${inputChar}${adder}`, \"yellow\", \"red\");\n            this.slowChars();\n            // this.pause();\n            this.animate(false);\n            return false;            \n        }\n    }\n\n    drawBackdrop () {\n        this.canvasInterface.clearRect(0, 0, this.width, this.height);\n        this.canvasInterface.globalAlpha = 0.4;\n        this.canvasInterface.drawImage(this.img,0,0)\n\n        this.canvasInterface.globalAlpha = 1;\n    }\n\n    // replayScreen() {\n    //     this.drawCounters();\n\n    //     const newMsg = `${getMsg()} Enter to replay.`\n    //     setMsg(newMsg, \"yellow\", \"red\");\n    //     // this.reset();\n    //     // this.animate();\n    //     // setMsg(\"Game over :( select return to play again!\")\n    // }\n\n    //called at initiation of each new game\n    reset() {\n        this.characters = [];\n        this.score = 0;\n        this.lives = 3;\n        this.charX = null;\n        this.resetSentence();\n        this.wordPause = 0;\n        this.charVel = 2;\n        this.printLives();\n        this.printScore();\n    }\n}","import Game from \"./game\";\n\nexport default class View {\n    \n    static INPUT = [\n        'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',\n        'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p',\n        'q', 'r', 's', 't', 'u', 'v', 'y', 'x',\n        'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F',\n        'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',\n        'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V',\n        'Y', 'X', 'Y', 'Z'\n      ];\n\n    constructor(canvasInterface) {\n        this.canvasInterface = canvasInterface;\n        this.game = new Game(canvasInterface);\n        this.bindKeys();\n        this.updateHTMLScore();\n    }\n\n    bindKeys() {\n\n        document.addEventListener('keydown', (event) => {\n            \n            this.handleKey(event);\n            // debugger;\n        });\n\n    }\n\n    handleKey(event) {\n        const key = event.key;\n        // debugger;\n\n        if (key === ' ' || key === 'Enter') {\n            // debugger;\n            // console.log(\"restarting\");\n            this.gameToggle();\n        } else if (key === 'ArrowRight') {\n            this.game.step();\n            this.game.animate();\n        } else if (View.INPUT.indexOf(key) >= 0 && !this.game.paused) {\n            this.game.checkEntry(key);\n        } else {\n            // console.log(key, `did not process your ${key}`);\n        }\n    }\n\n    //this checker checks whether the game is over and if so takes the necessary action\n    checkGame() {\n        if (this.game.gameOver) {\n            // this.game.gameOver = false;\n            // console.log(\"the game is over!!\")\n            clearInterval(this.gameCheckInterval);\n\n            if (document.cookie === '' || this.game.score > this.cookieScore()){\n                document.cookie = `highScore=${this.game.score}`;\n                this.updateHTMLScore();\n            }\n        }\n    }\n\n    cookieScore() {\n        let score = null;\n        const cookies = document.cookie;\n        const splitCookies = cookies.split(\";\");\n        for (let i = 0; i < splitCookies.length; i++) {\n            const pair = splitCookies[i];\n            const keyValue = pair.split(\"=\");\n\n            if (keyValue[0] === \"highScore\") {\n                score = parseInt(keyValue[1]);\n                break;\n            }\n        }\n\n        return score;\n    }\n\n    updateHTMLScore(){\n        const displayScore = this.cookieScore();\n        const scoreBoard = document.getElementById(\"scores\");\n        if (displayScore) {\n            scoreBoard.innerHTML = `High Score: ${displayScore}`;\n        } else {\n            scoreBoard.innerHTML = `No high score...yet`;\n        }\n    }\n\n    gameToggle(){\n        if(this.game.paused) {\n            this.game.start();\n            this.gameCheckInterval = setInterval(() => {\n                // console.log(\"game checked\");\n                this.checkGame();\n            }, 17);\n        } else {\n            clearInterval(this.gameCheckInterval);\n            this.game.pause()\n        }\n    }\n}\n\n","import Game from \"./scripts/game\";\nimport View from \"./scripts/view\";\n\n// const chance = require('chance').Chance();\n\n\n// const gameAssetDiv = document.getElementById(\"game-assets\");\n// const vertDivs = Array.from(document.getElementsByClassName(\"vertical-panel\"));\n\n// gameAssetDiv.style.height = \"550px\";\n// gameAssetDiv.style.width = \"1000px\";\n// debugger;\n// vertDivs.forEach(div => {\n//     div.style.height = '500px';\n// });\n\n// get the canvas element\nconst canvas = document.getElementById('game-canvas');\n\n//set the canvas dimensions according to game constants\ncanvas.width = 500;\ncanvas.height = 500;\n\n//get the canvas Interface\nconst canvasInterface = canvas.getContext('2d');\n\n//set the background for starters\n\n\nconst view = new View(canvasInterface);\nwindow.view = view;\n// view.startGame();"],"names":["MovingObject","constructor","argsHash","this","xCoordinate","yCoordinate","xVelocity","yVelocity","color","transparency","move","MovingRectangle","super","width","height","draw","canvasInterface","gradient","createLinearGradient","addColorStop","fillStyle","fillRect","MovingCharacter","character","typeable","points","font","FONT","fillText","fontMath","measureText","actualBoundingBoxAscent","actualBoundingBoxDescent","value","selectRand","array","length","Math","floor","random","msgDiv","document","getElementById","setMsg","msg","arguments","undefined","background","style","backgroundColor","innerHTML","Spiral","radius","charCount","centerX","centerY","numPoints","i","angle","PI","x","cos","y","sin","push","calculateCirclePoints","characters","createChars","counter","xDrop","yDrop","newChar","firstX","firstY","index","element","lastChar","forEach","char","Game","canvas","gameOver","paused","scoreOutput","livesOutput","reset","xCharOptions","targetBar","img","Image","src","onload","drawBackdrop","wordSpirals","newSpiral","printScore","score","printLives","lives","addChar","charToAdd","targetArray","wordPause","shift","charVel","resetSentence","targetSentence","ADJECTIVES","NOUNS","VERBS","ADVERBS","Array","from","step","charOffCanvas","splice","colorChar","spiral","hasLives","pause","slowChars","console","log","adder","animate","drawCounters","start","gameInterval","setInterval","charInterval","clearInterval","addOverlay","globalAlpha","entry","exit","diff","segment","checkEntry","inputChar","validChar","matchingChars","filter","hitChar","delIdx","indexOf","clearRect","drawImage","charX","_defineProperty","View","game","bindKeys","updateHTMLScore","addEventListener","event","handleKey","key","gameToggle","INPUT","checkGame","gameCheckInterval","cookie","cookieScore","splitCookies","split","keyValue","parseInt","displayScore","getContext","view","window"],"sourceRoot":""}