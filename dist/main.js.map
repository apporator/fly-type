{"version":3,"file":"main.js","mappings":"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","sources":["webpack://fly-type/./src/scripts/movingObject.js","webpack://fly-type/./src/scripts/movingRectangle.js","webpack://fly-type/./src/scripts/movingCharacter.js","webpack://fly-type/./src/scripts/util.js","webpack://fly-type/./src/scripts/game.js","webpack://fly-type/./src/scripts/view.js","webpack://fly-type/./src/index.js"],"sourcesContent":["export default class MovingObject {\n\n    constructor(argsHash) {\n        this.xCoordinate = argsHash.xCoordinate; \n        this.yCoordinate = argsHash.yCoordinate;\n        this.xVelocity = argsHash.xVelocity; \n        this.yVelocity = argsHash.yVelocity; \n        this.color = argsHash.color;\n        this.transparency = argsHash.transparency || 1;\n    }\n\n    move() {\n        // console.log(`before - x: ${this.xCoordinate} and y:${this.yCoordinate}`);\n        this.xCoordinate = this.xCoordinate + this.xVelocity;\n        this.yCoordinate = this.yCoordinate + this.yVelocity;\n        // console.log(`after - x: ${this.xCoordinate} and y:${this.yCoordinate}`);\n    }\n}","import MovingObject from \"./movingObject\";\n\nexport default class MovingRectangle extends MovingObject {\n    \n    constructor(argsHash) {\n        super(argsHash);\n        this.width = argsHash.width;\n        this.height = argsHash.height;\n        // debugger;\n    }\n\n    draw(canvasInterface) {\n        // canvasInterface.fillStyle = this.color;\n\n        const gradient = canvasInterface.createLinearGradient(this.xCoordinate, this.yCoordinate, this.xCoordinate, this.yCoordinate + this.height);\n        \n        gradient.addColorStop(0, \"lightyellow\");\n        gradient.addColorStop(0.30, \"yellow\");\n        gradient.addColorStop(0.5, \"yellow\");\n        gradient.addColorStop(0.70, \"yellow\");\n        gradient.addColorStop(1, \"lightyellow\");\n        \n        // Set the fill style to the gradient\n        canvasInterface.fillStyle = gradient;\n        canvasInterface.fillRect(this.xCoordinate, this.yCoordinate, this.width, this.height);\n    }\n}\n\n// // Get a reference to the canvas element\n// const canvas = document.getElementById('my-canvas');\n\n// // Get the canvas context\n// const ctx = canvas.getContext('2d');\n\n// // Set the fill color and draw a filled rectangle\n// ctx.fillStyle = 'red';\n// ctx.fillRect(50, 50, 100, 100);\n\n// // Set the stroke color and draw a stroked rectangle\n// ctx.strokeStyle = 'blue';\n// ctx.strokeRect(200, 50, 100, 100);","import MovingRectangle from \"./movingRectangle\";\n\nexport default class MovingCharacter extends MovingRectangle {\n\n    static FONT = '20px Georgia';\n\n    constructor(argsHash) {\n        super(argsHash);\n        this.character = argsHash.character;\n        this.color = (argsHash.color || \"black\");\n        this.canvasInterface = argsHash.canvasInterface;\n        this.typeable = argsHash.typeable;\n        this.points = 0;\n    }\n\n    draw(canvasInterface) {\n        // debugger;\n        canvasInterface.fillStyle = this.color;\n        canvasInterface.font = MovingCharacter.FONT;\n        canvasInterface.fillText(this.character, this.xCoordinate, this.yCoordinate);\n    }\n\n    get height(){\n        this.canvasInterface.font = MovingCharacter.FONT;\n        const fontMath = this.canvasInterface.measureText(this.character);\n        const h = fontMath.actualBoundingBoxAscent + fontMath.actualBoundingBoxDescent\n        \n        return h;\n    }\n\n    set height(value){\n        //setting height does nothing. Can only be set by changing the character\n    }\n}","import Game from \"./game\";\n\nlet color = true;\n\nexport function selectRand(array) {\n    if(!array.length) return null;\n\n    const randIndex = Math.floor(Math.random() * array.length);\n\n    return array[randIndex];\n}\n\nexport function genSentence() {\n    // debugger;\n\n    const adjective = selectRand(Game.ADJECTIVES);\n    const noun = selectRand(Game.NOUNS);\n    const verb = selectRand(Game.VERBS);\n    const adverb = selectRand(Game.ADVERBS);\n\n    const sentence = `${adjective} ${noun}s ${verb} ${adverb}`;\n    return sentence;\n}\n\nexport function setBanner(msg) {\n    const senDiv = document.getElementById(\"sentence\")\n    senDiv.innerHTML = msg;\n}\n\nconst msgDiv = document.getElementById(\"message\")\n\nexport function setMsg(msg, color = \"\", background = \"\") {\n    msgDiv.style.backgroundColor = background;\n    msgDiv.style.color = color;\n    msgDiv.innerHTML = msg;\n}\n\nexport function getMsg() {\n    return msgDiv.innerHTML;\n}","import MovingCharacter from \"./movingCharacter\";\nimport MovingRectangle from \"./movingRectangle\";\nimport { genSentence, getMsg, selectRand, setBanner, setMsg } from \"./util\";\n\nexport default class Game {\n   \n    // static DICTIONARY = [\"h\",\"j\",\"k\",\"l\"];\n    // static DICTIONARY = [\"h\"]; // limited test chars\n    \n    static ADJECTIVES = ['furry', 'happy', 'gloomy', 'friendly'];\n    static NOUNS = ['dog', 'cat', 'tree', 'mountain'];\n    static VERBS = ['ran', 'jumped', 'slept', 'ate'];\n    static ADVERBS = ['quickly', 'slowly', 'loudly', 'quietly'];\n\n    constructor(canvasInterface) {\n        this.canvasInterface = canvasInterface;\n        this.width = canvasInterface.canvas.width;\n        this.height = canvasInterface.canvas.height;\n        this.gameOver = false;\n        this.paused = true;\n\n        this.scoreOutput = document.getElementById(\"game-score\");\n        this.livesOutput = document.getElementById(\"game-lives\");\n\n        this.reset();\n\n        this.xCharOptions = [\n            this.width*0.20,\n            this.width*0.40,\n            this.width*0.60,\n            this.width*0.80\n        ];\n\n        this.img = new Image();\n        this.img.src = 'assets/fullLegalPad500.png';\n        // this.img.style.width = '100%';\n        // this.img.style.height = '100%';\n\n\n        // debugger;\n\n        //initialize the target bar that the letters will cross and give it starting positions\n        this.targetBar = new MovingRectangle({\n            xCoordinate: 0,\n            yCoordinate: 411,\n            xVelocity: 0, \n            yVelocity: 0, \n            color: \"lightgrey\",\n            width: this.width,\n            height: 50,\n            canvasInterface: this.canvasInterface\n        })\n    }\n\n    printScore() {\n        this.scoreOutput.innerHTML = this.score;\n    }\n\n    printLives() {\n        this.livesOutput.innerHTML = this.lives;\n    }\n\n    addChar() {\n\n        const charToAdd = this.targetArray[0];\n        // debugger;\n        if (this.characters.length >= 1 && this.characters[this.characters.length-1].yCoordinate <= this.height*0.05) {\n            //do nothing if the most recently added character is still within the first 5% of the height of the board\n        }\n        else if(charToAdd === \" \") {\n            this.wordPause = 2;\n            this.targetArray.shift();\n        }\n        else if (this.targetArray.length > 0 && this.wordPause <= 0){\n            \n            const newChar = new MovingCharacter({\n                xCoordinate: selectRand(this.xCharOptions),\n                yCoordinate: 0,\n                xVelocity: 0, \n                yVelocity: this.charVel, \n                character: this.targetArray.shift(),\n                canvasInterface: this.canvasInterface,\n                typeable: false\n            })\n            this.characters.push(newChar);\n        } else if (this.characters.length === 0) {\n            this.resetSentence();\n            this.charVel = this.charVel*1.2;\n        } else {\n            // console.log(\"decrementing\");\n            this.wordPause--;\n        }\n        // debugger;\n    }\n\n    // removeChar() {\n    //     return this.noSpaceTarget.shift();\n    // }\n\n    // sentenceCleared() {\n    //     return (this.noSpaceTarget.length === 0 || this.characters.length === 0)\n    // }\n\n    resetSentence() {\n        this.targetSentence = genSentence();\n        this.targetArray = Array.from(this.targetSentence);\n        // this.noSpaceTarget = Array.from(this.targetSentence.split(\" \").join(\"\"));\n        setBanner(this.targetSentence);\n    }\n\n    step() {\n        \n        for (let i = this.characters.length - 1; i >=0; i--) {\n            const char = this.characters[i];\n            char.move();\n\n            if (this.charOffCanvas(char)) {\n                // debugger;\n                // console.log(\"char deleted\");\n                this.characters.splice(i,1);\n            } else {\n                this.colorChar(char);\n            }\n        }\n        \n        //end game if score is <=0\n        if (!this.hasLives()) {\n            this.pause();\n            // this.drawCounters();\n            // this.characters = [];\n            // this.reset();\n            this.gameOver = true;\n            // debugger;\n            // console.log(\"game over\");\n            // debugger;\n        }\n        // console.log(this.characters.length, \"num of chars\");\n    }\n\n    hasLives() {\n        return this.lives > 0;\n    }\n\n    charOffCanvas(char) {\n        if (char.yCoordinate > (this.height + char.height)) {\n            this.lives --;\n\n            let adder = \"\"\n\n            if (!this.hasLives()) {\n                adder = '. Enter to replay.'\n            }\n\n            setMsg(`Oh no, you missed ${char.character}${adder}.`, \"black\", \"grey\");\n            this.pause();\n            this.animate(false);\n            return true\n        } else {\n            return false;\n        }\n    }\n\n    animate(withChars = true){\n        this.drawBackdrop();\n        this.targetBar.draw(this.canvasInterface);\n\n        this.characters.forEach((char) =>{\n            if (withChars) {\n                char.draw(this.canvasInterface);\n            } else if (char.typeable) {\n                char.draw(this.canvasInterface);\n            }\n        });\n        this.drawCounters();\n    }\n\n    drawCounters() {\n        this.printLives();\n        this.printScore();\n    }\n\n    start() { \n        // debugger;\n        setMsg(\"\");\n        this.gameInterval = setInterval(() => {\n            this.paused = false;\n            if (this.gameOver) {\n                this.reset();\n                this.gameOver = false;\n            }\n\n            this.step();\n            \n            if (!this.gameOver) this.animate();\n        \n        }, 17);\n        \n        this.charInterval = setInterval(() => {\n            // console.log(\"char added\");\n            this.addChar();\n        }, 500);\n    }\n\n    pause() {\n        clearInterval(this.gameInterval);\n        clearInterval(this.charInterval);\n        this.paused = true;\n        this.drawCounters();\n        // debugger;\n        // setMsg(\"Game paused. Space to resume.\")\n        this.addOverlay()\n    }\n\n    addOverlay(color = \"grey\", transparency = 0.5) {\n        this.canvasInterface.globalAlpha = transparency;\n        this.canvasInterface.fillStyle = color;\n        this.canvasInterface.fillRect(0,0,this.width,this.height);\n        this.canvasInterface.globalAlpha = 1;\n    }\n\n    colorChar(char) {\n        //checks if it is within the topmost and bottommost bounds of the target bar\n        \n        //the top of the bar\n        const entry = this.targetBar.yCoordinate;\n        const exit = this.targetBar.yCoordinate + this.targetBar.height + char.height;\n\n        if (char.yCoordinate >= entry && char.yCoordinate <= exit) {\n\n            let diff = exit - entry;\n            let segment = (char.yCoordinate - entry) / diff\n\n            if (segment >= 0.2 && segment <= 0.8) {\n                char.color = \"green\";\n                char.points = 15;\n            } else {\n                char.color = \"red\";\n                char.points = 10;\n            }\n\n            char.typeable = true;      \n        } else {\n            char.typeable = false;\n            char.points = 0;\n            char.color = \"black\";\n        }\n    }\n\n    \n    checkEntry(inputChar) {\n\n        let validChar = null;\n\n        //1. for each character that matches the user's input and is in the hit zone, give the user points, increase their lives, and add the character to a separate array to be deleted\n        const matchingChars = this.characters.filter((char) => {\n            if(char.character === inputChar && char.typeable) {\n                // debugger;\n                if (char.points === 15) {\n                    setMsg(\"Right on target - Nice!\", \"red\", \"yellow\");\n                } else {\n                    setMsg(\"Close....\", \"black\", \"grey\");\n                }\n\n                this.score = this.score + char.points;\n                this.lives = Math.min(this.lives + 1, 3);\n                return true;\n            } else if (char.typeable) {\n                validChar = char.character;\n            }\n        })\n\n        // cycle through these matching characters and delete them from the game as they have been hit\n        if (matchingChars.length > 0) {\n            matchingChars.forEach((hitChar) => {\n                const delIdx = this.characters.indexOf(hitChar);\n                this.characters.splice(delIdx,1);\n            });\n        } else {\n            this.lives = this.lives - 1;\n\n            let adder = \"\";\n            \n            if(validChar) {\n                adder = ` instead of ${validChar}`;\n            }\n            \n            if (!this.hasLives()) {\n                adder = adder + \". Enter to replay!\"\n            }\n\n            setMsg(`Arghhh. You entered ${inputChar}${adder}`, \"yellow\", \"red\");\n            this.pause();\n            this.animate(false);\n            return false;            \n        }\n    }\n\n    drawBackdrop () {\n        this.canvasInterface.fillRect(0, 0, this.width, this.height);\n        this.canvasInterface.drawImage(this.img,0,0)\n    }\n\n    // replayScreen() {\n    //     this.drawCounters();\n\n    //     const newMsg = `${getMsg()} Enter to replay.`\n    //     setMsg(newMsg, \"yellow\", \"red\");\n    //     // this.reset();\n    //     // this.animate();\n    //     // setMsg(\"Game over :( select return to play again!\")\n    // }\n\n    //called at initiation of each new game\n    reset() {\n        this.characters = [];\n        this.score = 0;\n        this.lives = 3;\n        this.charX = null;\n        this.resetSentence();\n        this.wordPause = 0;\n        this.charVel = 2;\n        this.printLives();\n        this.printScore();\n    }\n}","import Game from \"./game\";\n\nexport default class View {\n    \n    static INPUT = [\n        'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',\n        'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p',\n        'q', 'r', 's', 't', 'u', 'v', 'y', 'x',\n        'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F',\n        'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',\n        'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V',\n        'Y', 'X', 'Y', 'Z'\n      ];\n\n    constructor(canvasInterface) {\n        this.canvasInterface = canvasInterface;\n        this.game = new Game(canvasInterface);\n        this.bindKeys();\n        this.gameRunning = false;\n        this.updateHTMLScore();\n        \n        // this.boundKeyHandler = this.handleKey.bind(this);\n        // document.cookie = '';\n        // debugger;\n    }\n\n    bindKeys() {\n\n        document.addEventListener('keydown', (event) => {\n            \n            this.handleKey(event);\n            // debugger;\n        });\n\n    }\n\n    handleKey(event) {\n        const key = event.key;\n        // debugger;\n\n        if (key === ' ' || key === 'Enter') {\n            // debugger;\n            console.log(\"restarting\");\n            this.gameToggle();\n        } else if (key === 'ArrowRight') {\n            this.game.step();\n            this.game.animate();\n        } else if (View.INPUT.indexOf(key) >= 0) {\n            this.game.checkEntry(key);\n        } else {\n            console.log(key, `did not process your ${key}`);\n        }\n    }\n\n    startGame() {\n        this.gameRunning = true;\n        this.game.start();\n\n        this.gameCheckInterval = setInterval(() => {\n            // console.log(\"game checked\");\n            this.checkGame();\n        }, 17);\n\n    }\n\n    //this checker checks whether the game is over and if so takes the necessary action\n    checkGame() {\n        if (this.game.gameOver) {\n            // this.game.gameOver = false;\n            // console.log(\"the game is over!!\")\n            clearInterval(this.gameCheckInterval);\n            this.gameRunning = false;\n\n            if (document.cookie === '' || this.game.score > this.cookieScore()){\n                document.cookie = `highScore=${this.game.score}`;\n                this.updateHTMLScore();\n            }\n\n            // this.game.replayScreen();\n        }\n    }\n\n    cookieScore() {\n        let score = null;\n        const cookies = document.cookie;\n        const splitCookies = cookies.split(\";\");\n        for (let i = 0; i < splitCookies.length; i++) {\n            const pair = splitCookies[i];\n            const keyValue = pair.split(\"=\");\n\n            if (keyValue[0] === \"highScore\") {\n                score = parseInt(keyValue[1]);\n                break;\n            }\n        }\n\n        return score;\n    }\n\n    updateHTMLScore(){\n        const displayScore = this.cookieScore();\n        const scoreBoard = document.getElementById(\"scores\");\n        if (displayScore) {\n            scoreBoard.innerHTML = `High Score: ${displayScore}`;\n        } else {\n            scoreBoard.innerHTML = `No high score...yet`;\n        }\n    }\n\n    gameToggle(){\n        if (this.gameRunning) {\n            this.pauseGame();\n        } else {\n            this.startGame();\n        }\n    }\n\n    pauseGame(){\n        this.gameRunning = false;\n        clearInterval(this.gameCheckInterval);\n        this.game.pause()\n    }\n}\n\n","import Game from \"./scripts/game\";\nimport View from \"./scripts/view\";\n\n// const chance = require('chance').Chance();\n\n\n// const gameAssetDiv = document.getElementById(\"game-assets\");\n// const vertDivs = Array.from(document.getElementsByClassName(\"vertical-panel\"));\n\n// gameAssetDiv.style.height = \"550px\";\n// gameAssetDiv.style.width = \"1000px\";\n// debugger;\n// vertDivs.forEach(div => {\n//     div.style.height = '500px';\n// });\n\n// get the canvas element\nconst canvas = document.getElementById('game-canvas');\n\n//set the canvas dimensions according to game constants\ncanvas.width = 500;\ncanvas.height = 500;\n\n//get the canvas Interface\nconst canvasInterface = canvas.getContext('2d');\n\n//set the background for starters\n\n\nconst view = new View(canvasInterface);\nwindow.view = view;\nview.startGame();"],"names":["MovingObject","constructor","argsHash","this","xCoordinate","yCoordinate","xVelocity","yVelocity","color","transparency","move","MovingRectangle","super","width","height","draw","canvasInterface","gradient","createLinearGradient","addColorStop","fillStyle","fillRect","MovingCharacter","character","typeable","points","font","FONT","fillText","fontMath","measureText","actualBoundingBoxAscent","actualBoundingBoxDescent","value","selectRand","array","length","Math","floor","random","msgDiv","document","getElementById","setMsg","msg","arguments","undefined","background","style","backgroundColor","innerHTML","Game","canvas","gameOver","paused","scoreOutput","livesOutput","reset","xCharOptions","img","Image","src","targetBar","printScore","score","printLives","lives","addChar","charToAdd","targetArray","characters","wordPause","shift","newChar","charVel","push","resetSentence","targetSentence","ADJECTIVES","NOUNS","VERBS","ADVERBS","Array","from","step","i","char","charOffCanvas","splice","colorChar","hasLives","pause","adder","animate","withChars","drawBackdrop","forEach","drawCounters","start","gameInterval","setInterval","charInterval","clearInterval","addOverlay","globalAlpha","entry","exit","diff","segment","checkEntry","inputChar","validChar","matchingChars","filter","min","hitChar","delIdx","indexOf","drawImage","charX","_defineProperty","View","game","bindKeys","gameRunning","updateHTMLScore","addEventListener","event","handleKey","key","console","log","gameToggle","INPUT","startGame","gameCheckInterval","checkGame","cookie","cookieScore","splitCookies","split","keyValue","parseInt","displayScore","pauseGame","getContext","view","window"],"sourceRoot":""}