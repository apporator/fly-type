{"version":3,"file":"main.js","mappings":"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","sources":["webpack://fly-type/./src/scripts/movingObject.js","webpack://fly-type/./src/scripts/movingRectangle.js","webpack://fly-type/./src/scripts/movingCharacter.js","webpack://fly-type/./src/scripts/util.js","webpack://fly-type/./src/scripts/game.js","webpack://fly-type/./src/scripts/view.js","webpack://fly-type/./src/index.js"],"sourcesContent":["export default class MovingObject {\n\n    constructor(argsHash) {\n        this.xCoordinate = argsHash.xCoordinate; \n        this.yCoordinate = argsHash.yCoordinate;\n        this.xVelocity = argsHash.xVelocity; \n        this.yVelocity = argsHash.yVelocity; \n        this.color = argsHash.color;\n    }\n\n    move() {\n        // console.log(`before - x: ${this.xCoordinate} and y:${this.yCoordinate}`);\n        this.xCoordinate = this.xCoordinate + this.xVelocity;\n        this.yCoordinate = this.yCoordinate + this.yVelocity;\n        // console.log(`after - x: ${this.xCoordinate} and y:${this.yCoordinate}`);\n    }\n}","import MovingObject from \"./movingObject\";\n\nexport default class MovingRectangle extends MovingObject {\n    \n    constructor(argsHash) {\n        super(argsHash);\n        this.width = argsHash.width;\n        this.height = argsHash.height;\n        // debugger;\n    }\n\n    draw(canvasInterface) {\n        canvasInterface.fillStyle = this.color;\n        canvasInterface.fillRect(this.xCoordinate, this.yCoordinate, this.width, this.height);\n    }\n}\n\n// // Get a reference to the canvas element\n// const canvas = document.getElementById('my-canvas');\n\n// // Get the canvas context\n// const ctx = canvas.getContext('2d');\n\n// // Set the fill color and draw a filled rectangle\n// ctx.fillStyle = 'red';\n// ctx.fillRect(50, 50, 100, 100);\n\n// // Set the stroke color and draw a stroked rectangle\n// ctx.strokeStyle = 'blue';\n// ctx.strokeRect(200, 50, 100, 100);","import MovingRectangle from \"./movingRectangle\";\n\nexport default class MovingCharacter extends MovingRectangle {\n\n    static FONT = '20px Georgia';\n\n    constructor(argsHash) {\n        super(argsHash);\n        this.character = argsHash.character;\n        this.color = (argsHash.color || \"black\");\n        this.canvasInterface = argsHash.canvasInterface;\n        this.typeable = argsHash.typeable;\n    }\n\n    draw(canvasInterface) {\n        // debugger;\n        canvasInterface.fillStyle = this.color;\n        canvasInterface.font = MovingCharacter.FONT;\n        canvasInterface.fillText(this.character, this.xCoordinate, this.yCoordinate);\n    }\n\n    get height(){\n        this.canvasInterface.font = MovingCharacter.FONT;\n        const fontMath = this.canvasInterface.measureText(this.character);\n        const h = fontMath.actualBoundingBoxAscent + fontMath.actualBoundingBoxDescent\n        \n        return h;\n    }\n\n    set height(value){\n        //setting height does nothing. Can only be set by changing the character\n    }\n}","import Game from \"./game\";\n\nexport function selectRand(array) {\n    if(!array.length) return null;\n\n    const randIndex = Math.floor(Math.random() * array.length);\n\n    return array[randIndex];\n}\n\nexport function genSentence() {\n    // debugger;\n\n    const adjective = selectRand(Game.ADJECTIVES);\n    const noun = selectRand(Game.NOUNS);\n    const verb = selectRand(Game.VERBS);\n    const adverb = selectRand(Game.ADVERBS);\n\n    const sentence = `${adjective} ${noun}s ${verb} ${adverb}`;\n    return sentence;\n}\n\nexport function setBanner(msg) {\n    const senDiv = document.getElementById(\"sentence\")\n    senDiv.innerHTML = msg;\n}","import MovingCharacter from \"./movingCharacter\";\nimport MovingRectangle from \"./movingRectangle\";\nimport { genSentence, selectRand, setBanner } from \"./util\";\n\nexport default class Game {\n   \n    // static DICTIONARY = [\"h\",\"j\",\"k\",\"l\"];\n    // static DICTIONARY = [\"h\"]; // limited test chars\n    \n    static ADJECTIVES = ['furry', 'happy', 'gloomy', 'friendly'];\n    static NOUNS = ['dog', 'cat', 'tree', 'mountain'];\n    static VERBS = ['ran', 'jumped', 'slept', 'ate'];\n    static ADVERBS = ['quickly', 'slowly', 'loudly', 'quietly'];\n\n    constructor(canvasInterface) {\n        this.canvasInterface = canvasInterface;\n        this.width = canvasInterface.canvas.width;\n        this.height = canvasInterface.canvas.height;\n        this.gameOver = false;\n\n        this.reset();\n\n        this.xCharOptions = [\n            this.width*0.20,\n            this.width*0.40,\n            this.width*0.60,\n            this.width*0.80\n        ];\n\n        this.img = new Image();\n        this.img.src = '../assets/fullLegalPad500.png';\n        // this.img.style.width = '100%';\n        // this.img.style.height = '100%';\n\n\n        // debugger;\n\n        //initialize the target bar that the letters will cross and give it starting positions\n        this.targetBar = new MovingRectangle({\n            xCoordinate: 0,\n            yCoordinate: 411,\n            xVelocity: 0, \n            yVelocity: 0, \n            color: \"lightgrey\",\n            width: this.width,\n            height: 33,\n            canvasInterface: this.canvasInterface\n        })\n    }\n\n    addChar() {\n\n        const charToAdd = this.targetArray[0];\n        // debugger;\n        if (charToAdd === \" \") {\n            this.wordPause = 2;\n            this.targetArray.shift();\n        }\n        else if (this.targetArray.length > 0 && this.wordPause <= 0){\n            \n            const newChar = new MovingCharacter({\n                xCoordinate: selectRand(this.xCharOptions),\n                yCoordinate: 0,\n                xVelocity: 0, \n                yVelocity: this.charVel, \n                character: this.targetArray.shift(),\n                canvasInterface: this.canvasInterface,\n                typeable: false\n            })\n            this.characters.push(newChar);\n        } else if (this.characters.length === 0) {\n            this.resetSentence();\n            this.charVel = this.charVel*1.2;\n        } else {\n            // console.log(\"decrementing\");\n            this.wordPause--;\n        }\n        // debugger;\n    }\n\n    // removeChar() {\n    //     return this.noSpaceTarget.shift();\n    // }\n\n    // sentenceCleared() {\n    //     return (this.noSpaceTarget.length === 0 || this.characters.length === 0)\n    // }\n\n    resetSentence() {\n        this.targetSentence = genSentence();\n        this.targetArray = Array.from(this.targetSentence);\n        // this.noSpaceTarget = Array.from(this.targetSentence.split(\" \").join(\"\"));\n        setBanner(this.targetSentence);\n    }\n\n    step() {\n        \n        for (let i = this.characters.length - 1; i >=0; i--) {\n            const char = this.characters[i];\n            char.move();\n\n            if (this.charOffCanvas(char)) {\n                // debugger;\n                // console.log(\"char deleted\");\n                this.characters.splice(i,1);\n            } else {\n                this.colorChar(char);\n            }\n        }\n        \n        //end game if score is <=0\n        if (this.lives <= 0) {\n            this.pause();\n            // this.characters = [];\n            // this.reset();\n            this.gameOver = true;\n            // console.log(\"game over\");\n            // debugger;\n        }\n        // console.log(this.characters.length, \"num of chars\");\n    }\n\n    charOffCanvas(char) {\n        if (char.yCoordinate > (this.height + char.height)) {\n            this.lives --;\n            // console.log(\"live lost\");\n            // debugger;\n            return true\n        } else {\n            return false;\n        }\n    }\n\n    animate(){\n        this.drawBackdrop(\"beige\");\n        this.targetBar.draw(this.canvasInterface);\n        this.characters.forEach((char) =>{\n            char.draw(this.canvasInterface);\n        });\n        this.drawCounters();\n    }\n\n    drawCounters() {\n        \n        this.canvasInterface.fillStyle = \"black\";\n        this.canvasInterface.font = '14px Arial';\n        \n        //draw score\n        const scoreX =  0.01*this.width;\n        const scoreY =  0.99*this.height;\n\n        this.canvasInterface.fillText(`Score: ${this.score}`,scoreX,scoreY);\n\n        //draw lives\n        const livesX =  0.89*this.width;\n        const livesY =  0.99*this.height;\n        \n        this.canvasInterface.fillText(`Lives: ${this.lives}`,livesX,livesY);\n    }\n\n    start() {\n        this.gameInterval = setInterval(() => {\n            \n            if (this.gameOver) {\n                this.reset();\n                this.gameOver = false;\n            }\n\n            this.step();\n            \n            if (!this.gameOver) this.animate();\n        \n        }, 17);\n        \n        this.charInterval = setInterval(() => {\n            // console.log(\"char added\");\n            this.addChar();\n        }, 500);\n    }\n\n    pause() {\n        clearInterval(this.gameInterval);\n        clearInterval(this.charInterval);\n    }\n\n    colorChar(char) {\n        if (char.yCoordinate >= this.targetBar.yCoordinate && char.yCoordinate <= (this.targetBar.yCoordinate + this.targetBar.height + char.height)) {\n            char.typeable = true;\n            char.color = \"red\";\n        } else {\n            char.typeable = false;\n            char.color = \"black\";\n        }\n    }\n\n    \n    checkEntry(inputChar) {\n        // debugger;\n        // console.log(inputChar, \"input char\");\n        const matchingChars = this.characters.filter((char) => {\n            if(char.character === inputChar && char.typeable) {\n                this.score = this.score + 10;\n                this.lives = Math.min(this.lives + 1, 3);\n                return true;\n            }\n        })\n        if (matchingChars.length > 0) {\n            matchingChars.forEach((hitChar) => {\n                const delIdx = this.characters.indexOf(hitChar);\n                this.characters.splice(delIdx,1);\n            });\n        } else {\n            // console.log(\"miss!\");\n            // debugger;\n            return false;\n        }\n    }\n\n    drawBackdrop (color) {\n        this.canvasInterface.fillStyle = color;\n        this.canvasInterface.fillRect(0, 0, this.width, this.height);\n        // debugger;\n        this.canvasInterface.drawImage(this.img,0,0)\n    }\n\n    replayScreen() {\n        // console.log(\"replay screen\")\n        this.drawBackdrop(\"grey\");\n        this.characters = [];\n        this.score = 0;\n        this.lives = 3;\n        this.charX = null;\n\n        // this.canvasInterface.fillStyle = \"black\";\n        // this.canvasInterface.font = '26px Arial';\n        \n        // //draw score\n        // const msgX =  0.20*this.width;\n        // const msgY =  0.50*this.height;\n\n        // this.canvasInterface.fillText(`Select return to play again!`,msgX,msgY);\n\n        setBanner(\"Game over :( select return to play again!\")\n        // debugger;\n    }\n\n    //called at initiation of each new game\n    reset() {\n        this.characters = [];\n        this.score = 0;\n        this.lives = 3;\n        this.charX = null;\n        this.resetSentence();\n        this.wordPause = 0;\n        this.charVel = 2;\n    }\n}\n        ","import Game from \"./game\";\n\nexport default class View {\n    \n    static INPUT = [\n        'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',\n        'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p',\n        'q', 'r', 's', 't', 'u', 'v', 'y', 'x',\n        'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F',\n        'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',\n        'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V',\n        'Y', 'X', 'Y', 'Z'\n      ];\n\n    constructor(canvasInterface) {\n        this.canvasInterface = canvasInterface;\n        this.game = new Game(canvasInterface);\n        this.bindKeys();\n        this.gameRunning = false;\n        this.updateHTMLScore();\n        \n        // this.boundKeyHandler = this.handleKey.bind(this);\n        // document.cookie = '';\n        // debugger;\n    }\n\n    bindKeys() {\n\n        document.addEventListener('keydown', (event) => {\n            \n            this.handleKey(event);\n            // debugger;\n        });\n\n    }\n\n    handleKey(event) {\n        const key = event.key;\n        // debugger;\n\n        if (key === ' ' || key === 'Enter') {\n            // debugger;\n            console.log(\"restarting\");\n            this.gameToggle();\n        } else if (key === 'ArrowRight') {\n            this.game.step();\n            this.game.animate();\n        } else if (View.INPUT.indexOf(key) >= 0) {\n            this.game.checkEntry(key);\n        } else {\n            console.log(key, `did not process your ${key}`);\n        }\n    }\n\n    startGame() {\n        this.gameRunning = true;\n        this.game.start();\n\n        this.gameCheckInterval = setInterval(() => {\n            // console.log(\"game checked\");\n            this.checkGame();\n        }, 17);\n\n    }\n\n    //this checker checks whether the game is over and if so takes the necessary action\n    checkGame() {\n        if (this.game.gameOver) {\n            // this.game.gameOver = false;\n            // console.log(\"the game is over!!\")\n            clearInterval(this.gameCheckInterval);\n            this.gameRunning = false;\n\n            if (document.cookie === '' || this.game.score > this.cookieScore()){\n                document.cookie = `highScore=${this.game.score}`;\n                this.updateHTMLScore();\n            }\n\n            this.game.replayScreen();\n        }\n    }\n\n    cookieScore() {\n        let score = null;\n        const cookies = document.cookie;\n        const splitCookies = cookies.split(\";\");\n        for (let i = 0; i < splitCookies.length; i++) {\n            const pair = splitCookies[i];\n            const keyValue = pair.split(\"=\");\n\n            if (keyValue[0] === \"highScore\") {\n                score = parseInt(keyValue[1]);\n                break;\n            }\n        }\n\n        return score;\n    }\n\n    updateHTMLScore(){\n        const displayScore = this.cookieScore();\n        const scoreBoard = document.getElementById(\"scores\");\n        if (displayScore) {\n            scoreBoard.innerHTML = `High Score: ${displayScore}`;\n        } else {\n            scoreBoard.innerHTML = `No high score...yet`;\n        }\n    }\n\n    gameToggle(){\n        if (this.gameRunning) {\n            this.pauseGame();\n        } else {\n            this.startGame();\n        }\n    }\n\n    pauseGame(){\n        this.gameRunning = false;\n        this.game.pause()\n    }\n}\n\n","import Game from \"./scripts/game\";\nimport View from \"./scripts/view\";\n\n// const chance = require('chance').Chance();\n\n\n// const gameAssetDiv = document.getElementById(\"game-assets\");\n// const vertDivs = Array.from(document.getElementsByClassName(\"vertical-panel\"));\n\n// gameAssetDiv.style.height = \"550px\";\n// gameAssetDiv.style.width = \"1000px\";\n// debugger;\n// vertDivs.forEach(div => {\n//     div.style.height = '500px';\n// });\n\n// get the canvas element\nconst canvas = document.getElementById('game-canvas');\n\n//set the canvas dimensions according to game constants\ncanvas.width = 500;\ncanvas.height = 500;\n\n//get the canvas Interface\nconst canvasInterface = canvas.getContext('2d');\n\n//set the background for starters\n\n\nconst view = new View(canvasInterface);\nwindow.view = view;\nview.startGame();"],"names":["MovingObject","constructor","argsHash","this","xCoordinate","yCoordinate","xVelocity","yVelocity","color","move","MovingRectangle","super","width","height","draw","canvasInterface","fillStyle","fillRect","MovingCharacter","character","typeable","font","FONT","fillText","fontMath","measureText","actualBoundingBoxAscent","actualBoundingBoxDescent","value","selectRand","array","length","Math","floor","random","setBanner","msg","document","getElementById","innerHTML","Game","canvas","gameOver","reset","xCharOptions","img","Image","src","targetBar","addChar","targetArray","wordPause","shift","newChar","charVel","characters","push","resetSentence","targetSentence","ADJECTIVES","NOUNS","VERBS","ADVERBS","Array","from","step","i","char","charOffCanvas","splice","colorChar","lives","pause","animate","drawBackdrop","forEach","drawCounters","scoreX","scoreY","score","livesX","livesY","start","gameInterval","setInterval","charInterval","clearInterval","checkEntry","inputChar","matchingChars","filter","min","hitChar","delIdx","indexOf","drawImage","replayScreen","charX","_defineProperty","View","game","bindKeys","gameRunning","updateHTMLScore","addEventListener","event","handleKey","key","console","log","gameToggle","INPUT","startGame","gameCheckInterval","checkGame","cookie","cookieScore","splitCookies","split","keyValue","parseInt","displayScore","pauseGame","getContext","view","window"],"sourceRoot":""}